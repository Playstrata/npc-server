generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GameCharacter {
  id                     String               @id @default(uuid())
  characterName          String               @map("character_name")
  level                  Int                  @default(1)
  experience             Int                  @default(0)
  health                 Int                  @default(100)
  maxHealth              Int                  @default(100) @map("max_health")
  mana                   Int                  @default(50)
  maxMana                Int                  @default(50) @map("max_mana")
  strength               Int                  @default(10)
  dexterity              Int                  @default(10)
  intelligence           Int                  @default(10)
  vitality               Int                  @default(10)
  luck                   Int                  @default(10)
  createdAt              DateTime             @default(now()) @map("created_at")
  updatedAt              DateTime             @updatedAt @map("updated_at")
  userId                 String               @unique @map("user_id")
  availableStatPoints    Int                  @default(5) @map("available_stat_points")
  baseCarryingCapacity   Float                @default(5.0) @map("base_carrying_capacity")
  carryingCapacity       Float                @default(5.0) @map("carrying_capacity")
  characterClass         String               @default("NOVICE") @map("character_class")
  currentMapLocation     String               @default("starter_town") @map("current_map_location")
  currentVolume          Float                @default(0.0) @map("current_volume")
  currentWeight          Float                @default(0.0) @map("current_weight")
  equippedArmor          String?              @map("equipped_armor")
  equippedBackpack       String?              @map("equipped_backpack")
  equippedWeapon         String?              @map("equipped_weapon")
  goldAmount             Int                  @default(0) @map("gold_amount")
  isResting              Boolean              @default(false) @map("is_resting")
  lastSaveTimestamp      DateTime             @default(now()) @map("last_save_timestamp")
  lastStaminaUpdate      DateTime             @default(now()) @map("last_stamina_update")
  magicalStorageCapacity Float                @default(0.0) @map("magical_storage_capacity")
  magicalStorageUsed     Float                @default(0.0) @map("magical_storage_used")
  maxStamina             Float                @default(100.0) @map("max_stamina")
  maxVolume              Float                @default(2.0) @map("max_volume")
  movementPenalty        Float                @default(0.0) @map("movement_penalty")
  positionX              Float                @default(0) @map("position_x")
  positionY              Float                @default(0) @map("position_y")
  restStartTime          DateTime?            @map("rest_start_time")
  stamina                Float                @default(100.0)
  staminaRegenRate       Float                @default(1.0) @map("stamina_regen_rate")
  baseStamina            Int                  @default(10) @map("base_stamina")
  equippedGloves         String?              @map("equipped_gloves")
  equippedPants          String?              @map("equipped_pants")
  equippedShield         String?              @map("equipped_shield")
  equippedShirt          String?              @map("equipped_shirt")
  equippedShoes          String?              @map("equipped_shoes")
  luckPercentage         Float                @default(50.0) @map("luck_percentage")
  knowledges             CharacterKnowledge[]
  skills                 CharacterSkill[]
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobChangeHistory       JobChangeHistory[]
  magicalStorageItems    MagicalStorage[]
  inventoryItems         PlayerInventory[]
  bankAccounts           BankAccount[]

  @@map("game_characters")
}

model CharacterSkill {
  id              String                 @id @default(cuid())
  characterId     String                 @map("character_id")
  skillType       String                 @map("skill_type")
  experience      Int                    @default(0)
  level           String                 @default("NOVICE")
  unlockedAt      DateTime               @default(now()) @map("unlocked_at")
  lastPracticed   DateTime?              @map("last_practiced")
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @updatedAt @map("updated_at")
  character       GameCharacter          @relation(fields: [characterId], references: [id], onDelete: Cascade)
  practiceHistory SkillPracticeHistory[]

  @@unique([characterId, skillType])
  @@map("character_skills")
}

model CharacterKnowledge {
  id            String        @id @default(cuid())
  characterId   String        @map("character_id")
  skillType     String        @map("skill_type")
  knowledgeType String        @map("knowledge_type")
  knowledgeName String        @map("knowledge_name")
  description   String?
  proficiency   Int           @default(0)
  learnedAt     DateTime      @default(now()) @map("learned_at")
  teacherNpcId  String?       @map("teacher_npc_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  character     GameCharacter @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([characterId, skillType, knowledgeName])
  @@map("character_knowledges")
}

model SkillPracticeHistory {
  id                String         @id @default(cuid())
  skillId           String         @map("skill_id")
  practiceType      String         @map("practice_type")
  practiceIntensity String         @map("practice_intensity")
  experienceGained  Int            @map("experience_gained")
  proficiencyGained Int            @map("proficiency_gained")
  knowledgeUsed     String?        @map("knowledge_used")
  timestamp         DateTime       @default(now())
  skill             CharacterSkill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@map("skill_practice_history")
}

model SkillDecayLog {
  id                    String   @id @default(cuid())
  characterId           String   @map("character_id")
  skillType             String   @map("skill_type")
  knowledgeName         String   @map("knowledge_name")
  eventType             String   @map("event_type")
  originalValue         Int      @map("original_value")
  newValue              Int      @map("new_value")
  decayAmount           Int      @map("decay_amount")
  daysSinceLastPractice Int      @map("days_since_last_practice")
  action                String?
  timestamp             DateTime @default(now())

  @@map("skill_decay_logs")
}

model PlayerInventory {
  id            String        @id @default(uuid())
  characterId   String        @map("character_id")
  itemId        String        @map("item_id")
  quantity      Int           @default(1)
  quality       String        @default("COMMON")
  weight        Float
  totalWeight   Float
  volume        Float
  totalVolume   Float
  slot          Int?
  isEquipped    Boolean       @default(false) @map("is_equipped")
  equipmentSlot String?       @map("equipment_slot")
  condition     Float         @default(100.0)
  isStackable   Boolean       @default(true) @map("is_stackable")
  maxStack      Int           @default(99) @map("max_stack")
  acquiredAt    DateTime      @default(now()) @map("acquired_at")
  lastUsedAt    DateTime?     @map("last_used_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  character     GameCharacter @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([characterId, itemId, quality])
  @@map("player_inventories")
}

model DeliveryQuest {
  id                String    @id @default(uuid())
  questId           String    @unique @map("quest_id")
  deliveryType      String    @map("delivery_type")
  fromNpcId         String    @map("from_npc_id")
  toNpcId           String    @map("to_npc_id")
  fromLocation      String    @map("from_location")
  toLocation        String    @map("to_location")
  itemId            String    @map("item_id")
  itemQuality       String    @map("item_quality")
  quantity          Int
  totalWeight       Float     @map("total_weight")
  requiredCapacity  Float     @map("required_capacity")
  timeLimit         Int?      @map("time_limit")
  distance          Float     @default(0.0)
  difficulty        String    @default("EASY")
  goldReward        Int       @map("gold_reward")
  experienceReward  Int       @map("experience_reward")
  reputationReward  Int       @map("reputation_reward")
  status            String    @default("AVAILABLE")
  assignedTo        String?   @map("assigned_to")
  startedAt         DateTime? @map("started_at")
  completedAt       DateTime? @map("completed_at")
  pickupConfirmed   Boolean   @default(false) @map("pickup_confirmed")
  deliveryConfirmed Boolean   @default(false) @map("delivery_confirmed")
  currentLocation   String?   @map("current_location")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("delivery_quests")
}

model NPCDeliveryRoute {
  id               String    @id @default(uuid())
  deliveryNpcId    String    @map("delivery_npc_id")
  routeName        String    @map("route_name")
  startLocation    String    @map("start_location")
  endLocation      String    @map("end_location")
  waypoints        String
  totalDistance    Float     @map("total_distance")
  estimatedTime    Int       @map("estimated_time")
  isActive         Boolean   @default(true) @map("is_active")
  priority         Int       @default(5)
  frequency        String    @default("DAILY")
  lastRun          DateTime? @map("last_run")
  nextScheduledRun DateTime? @map("next_scheduled_run")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@map("npc_delivery_routes")
}

model LogisticsTracking {
  id                String    @id @default(uuid())
  trackingNumber    String    @unique @map("tracking_number")
  deliveryQuestId   String?   @map("delivery_quest_id")
  routeId           String?   @map("route_id")
  itemId            String    @map("item_id")
  quantity          Int
  weight            Float
  status            String    @default("PENDING")
  currentLocation   String    @map("current_location")
  scheduledPickup   DateTime  @map("scheduled_pickup")
  actualPickup      DateTime? @map("actual_pickup")
  scheduledDelivery DateTime  @map("scheduled_delivery")
  actualDelivery    DateTime? @map("actual_delivery")
  handlerType       String    @map("handler_type")
  handlerId         String    @map("handler_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("logistics_tracking")
}

model MagicalStorage {
  id             String        @id @default(uuid())
  characterId    String        @map("character_id")
  itemId         String        @map("item_id")
  quantity       Int           @default(1)
  quality        String        @default("COMMON")
  manaUsed       Float         @map("mana_used")
  storedAt       DateTime      @default(now()) @map("stored_at")
  lastAccessedAt DateTime?     @map("last_accessed_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  character      GameCharacter @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@map("magical_storage")
}

model JobChangeHistory {
  id            String        @id @default(uuid())
  characterId   String        @map("character_id")
  fromClass     String        @map("from_class")
  toClass       String        @map("to_class")
  changedAt     DateTime      @default(now()) @map("changed_at")
  npcTrainerId  String        @map("npc_trainer_id")
  costPaid      Int           @map("cost_paid")
  levelAtChange Int           @map("level_at_change")
  notes         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  character     GameCharacter @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@map("job_change_history")
}

model User {
  id            String         @id
  name          String
  email         String         @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  username      String         @unique
  accounts      Account[]
  gameCharacter GameCharacter?
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Banking and Economic Models
model BankAccount {
  id            String   @id @default(uuid())
  characterId   String   @unique @map("character_id")
  accountType   String   @default("BASIC") @map("account_type")
  balance       Float    @default(0.0)
  creditScore   Int      @default(500) @map("credit_score")
  creditLimit   Float    @default(1000.0) @map("credit_limit")
  interestRate  Float    @default(0.05) @map("interest_rate")
  accountStatus String   @default("ACTIVE") @map("account_status")
  openedAt      DateTime @default(now()) @map("opened_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  character     GameCharacter      @relation(fields: [characterId], references: [id], onDelete: Cascade)
  transactions  BankTransaction[]
  loans         Loan[]

  @@map("bank_accounts")
}

model BankTransaction {
  id              String   @id @default(uuid())
  bankAccountId   String   @map("bank_account_id")
  transactionType String   @map("transaction_type")
  amount          Float
  balanceAfter    Float    @map("balance_after")
  description     String?
  timestamp       DateTime @default(now())
  createdAt       DateTime @default(now()) @map("created_at")
  
  bankAccount     BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)

  @@map("bank_transactions")
}

model Loan {
  id               String        @id @default(uuid())
  bankAccountId    String        @map("bank_account_id")
  principalAmount  Float         @map("principal_amount")
  interestRate     Float         @map("interest_rate")
  termMonths       Int           @map("term_months")
  monthlyPayment   Float         @map("monthly_payment")
  remainingBalance Float         @map("remaining_balance")
  status           String        @default("ACTIVE")
  loanPurpose      String        @map("loan_purpose")
  nextPaymentDue   DateTime?     @map("next_payment_due")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  
  bankAccount      BankAccount   @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  payments         LoanPayment[]

  @@map("loans")
}

model LoanPayment {
  id            String   @id @default(uuid())
  loanId        String   @map("loan_id")
  amount        Float
  paymentDate   DateTime @map("payment_date")
  principalPaid Float    @map("principal_paid")
  interestPaid  Float    @map("interest_paid")
  createdAt     DateTime @default(now()) @map("created_at")
  
  loan          Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("loan_payments")
}
